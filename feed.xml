<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.anprivitera.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.anprivitera.com/" rel="alternate" type="text/html" /><updated>2023-11-29T09:08:56+00:00</updated><id>https://www.anprivitera.com/feed.xml</id><title type="html">Andrea Privitera</title><entry><title type="html">Creating Wikipedia-style external links in Obsidian with Templater</title><link href="https://www.anprivitera.com/2023/11/27/wikipedia-style-links-obsidian-templater.html" rel="alternate" type="text/html" title="Creating Wikipedia-style external links in Obsidian with Templater" /><published>2023-11-27T00:35:00+00:00</published><updated>2023-11-27T00:35:00+00:00</updated><id>https://www.anprivitera.com/2023/11/27/wikipedia-style-links-obsidian-templater</id><content type="html" xml:base="https://www.anprivitera.com/2023/11/27/wikipedia-style-links-obsidian-templater.html"><![CDATA[<p>When I write a personal note in my <a href="https://obsidian.md/">Obsidian</a> vault, I like to include an external links section at the bottom of the note. My inspiration for this format was, obviously, <a href="https://en.wikipedia.org/">Wikipedia</a>. I really like the format of links at the bottom of Wikipedia pages, which includes both the external link and a wikilink to the larger site/service that hosts the page.</p>

<p><img src="/assets/images/wikipedia-external-links.png" alt="A screenshot of external links on Wikipedia" /></p>

<p>It makes sense to the way I organize notes, because it allows me to track which services, people or organizations are part of a certain social media.</p>

<p><img src="/assets/images/wikipedia-style-links.png" alt="A screenshot of external links in my vault" /></p>

<p>There is only one issue with this solution: it takes quite a lot of time to type the external links and then the internal link. To make the process quicker, I wrote this script, which I then activate in my Obsidian vault using <a href="https://github.com/SilentVoid13/Templater">Templater</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;%*</span> <span class="c1">// Templater syntax</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">links</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">linkOutput</span><span class="p">,</span> <span class="nx">siteTitle</span><span class="p">,</span> <span class="nx">siteUrl</span><span class="p">,</span> <span class="nx">siteOrSocial</span><span class="p">;</span>
	<span class="kd">const</span> <span class="nx">noteTitle</span> <span class="o">=</span> <span class="nx">tp</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span> <span class="c1">// Templater API</span>
	<span class="kd">const</span> <span class="nx">clipboard</span> <span class="o">=</span> <span class="nx">tp</span><span class="p">.</span><span class="nx">system</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">;</span> <span class="c1">// Templater API</span>
	<span class="kd">const</span> <span class="nx">suggester</span> <span class="o">=</span> <span class="nx">tp</span><span class="p">.</span><span class="nx">system</span><span class="p">.</span><span class="nx">suggester</span><span class="p">;</span> <span class="c1">// Templater API</span>
	<span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="nx">tp</span><span class="p">.</span><span class="nx">system</span><span class="p">.</span><span class="nx">prompt</span><span class="p">;</span> <span class="c1">// Templater API</span>

	<span class="nx">siteUrl</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What is the link's url?</span><span class="dl">"</span><span class="p">,</span> <span class="nx">clipboard</span><span class="p">);</span>
	<span class="nx">siteTitle</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What is the name of the site?</span><span class="dl">"</span><span class="p">);</span>
	<span class="kd">let</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Single Site</span><span class="dl">"</span><span class="p">,</span> <span class="na">formElement</span><span class="p">:</span> <span class="s2">`[</span><span class="p">${</span><span class="nx">siteTitle</span><span class="p">}</span><span class="s2">](</span><span class="p">${</span><span class="nx">siteUrl</span><span class="p">}</span><span class="s2">)`</span><span class="p">},</span> <span class="p">{</span><span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Page on Site</span><span class="dl">"</span><span class="p">,</span> <span class="na">formElement</span><span class="p">:</span> <span class="s2">`[</span><span class="p">${</span><span class="nx">noteTitle</span><span class="p">}</span><span class="s2">](</span><span class="p">${</span><span class="nx">siteUrl</span><span class="p">}</span><span class="s2">) on [[</span><span class="p">${</span><span class="nx">siteTitle</span><span class="p">}</span><span class="s2">]]`</span><span class="p">}];</span>
	<span class="nx">linkOutput</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">suggester</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">title</span><span class="p">),</span> <span class="nx">options</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">formElement</span><span class="p">),</span> <span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Is this a link for a single site or for a page in a bigger site?</span><span class="dl">"</span><span class="p">);</span>
	<span class="k">return</span> <span class="nx">linkOutput</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">links</span><span class="p">();</span>
<span class="o">%&gt;</span> <span class="c1">// Templater syntax</span>
<span class="o">-</span> <span class="o">&lt;%*</span> <span class="nx">tR</span> <span class="o">+=</span> <span class="nx">string</span> <span class="o">%&gt;</span> <span class="c1">// Templater syntax</span>
</code></pre></div></div>

<p>Here is the script in action.</p>

<p><img src="/assets/images/wikipedia links example.gif" alt="A recording of the script in action" /></p>

<p>Feel free to grab this script and use it for your own vault!</p>]]></content><author><name></name></author><category term="obsidian" /><category term="templater" /><category term="javascript" /><category term="pkms" /><summary type="html"><![CDATA[When I write a personal note in my Obsidian vault, I like to include an external links section at the bottom of the note. My inspiration for this format was, obviously, Wikipedia. I really like the format of links at the bottom of Wikipedia pages, which includes both the external link and a wikilink to the larger site/service that hosts the page.]]></summary></entry><entry><title type="html">Euro 2024 Random Group Stage Generator</title><link href="https://www.anprivitera.com/2023/11/21/euro-2024-random-group-stage-generator.html" rel="alternate" type="text/html" title="Euro 2024 Random Group Stage Generator" /><published>2023-11-21T22:48:00+00:00</published><updated>2023-11-21T22:48:00+00:00</updated><id>https://www.anprivitera.com/2023/11/21/euro-2024-random-group-stage-generator</id><content type="html" xml:base="https://www.anprivitera.com/2023/11/21/euro-2024-random-group-stage-generator.html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/UEFA_Euro_2024_qualifying">Euro 2024 qualifying</a> are (almost) over, and to celebrate Italyâ€™s finally getting qualified again to an international tournament I decided to write a little random generator in JavaScript to imagine how the <a href="https://en.wikipedia.org/wiki/UEFA_Euro_2024#Group_stage">final tournament in Germany</a> may look like next year.</p>

<p>Regardless of the generator result, it seems that Italy will have a hard time defending the title considering the competitionâ€¦ ðŸ« </p>

<p><a href="https://github.com/anprivitera/anprivitera.github.io/blob/main/assets/js/euro2024RandomGroups.js">You can find the JS code here</a>.</p>

<p><em>The information below is accurate as of Nov 23, 2023</em></p>

<p><button class="simplebutton" id="generate">Generate</button></p>

<h3>Group A</h3>
<ol>
    <li id="a1">Germany</li>
    <li id="a2"></li>
    <li id="a3"></li>
    <li id="a4"></li>
</ol>
<h3>Group B</h3>
<ol>
    <li id="b1"></li>
    <li id="b2"></li>
    <li id="b3"></li>
    <li id="b4"></li>
</ol>
<h3>Group C</h3>
<ol>
    <li id="c1"></li>
    <li id="c2"></li>
    <li id="c3"></li>
    <li id="c4"></li>
</ol>
<h3>Group D</h3>
<ol>
    <li id="d1"></li>
    <li id="d2"></li>
    <li id="d3"></li>
    <li id="d4"></li>
</ol>
<h3>Group E</h3>
<ol>
    <li id="e1"></li>
    <li id="e2"></li>
    <li id="e3"></li>
    <li id="e4"></li>
</ol>
<h3>Group F</h3>
<ol>
    <li id="f1"></li>
    <li id="f2"></li>
    <li id="f3"></li>
    <li id="f4"></li>
</ol>

<script src="/assets/js/euro2024RandomGroups.js">

</script>]]></content><author><name></name></author><category term="soccer" /><category term="javascript" /><summary type="html"><![CDATA[The Euro 2024 qualifying are (almost) over, and to celebrate Italyâ€™s finally getting qualified again to an international tournament I decided to write a little random generator in JavaScript to imagine how the final tournament in Germany may look like next year.]]></summary></entry><entry><title type="html">Routes and Layouts in NextJS</title><link href="https://www.anprivitera.com/2023/11/12/nextjs-page-and-layout.html" rel="alternate" type="text/html" title="Routes and Layouts in NextJS" /><published>2023-11-12T04:19:00+00:00</published><updated>2023-11-12T04:19:00+00:00</updated><id>https://www.anprivitera.com/2023/11/12/nextjs-page-and-layout</id><content type="html" xml:base="https://www.anprivitera.com/2023/11/12/nextjs-page-and-layout.html"><![CDATA[<p>Today I completed Chapter 4 of the NextJS tutorial. However, I was in the mood of learning by doing some freeform experimenting. So, before starting the tutorial, I decided to write some nested routing on my own, in the attempt to break things (spoiler alert: it didnâ€™t take long for me to break things!).</p>

<h2 id="some-messy-experiments">Some messy experiments</h2>

<p>I started by creaing a simple about page copying and pasting the layout from the index page.</p>

<p><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">About</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">getDate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toLocaleDateString</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome! Today is <span class="si">{</span> <span class="nf">getDate</span><span class="p">()</span> <span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Here are some links to get you started:<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/app/about/layout.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">RootLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="p">=</span><span class="s">"en"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">body</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span> <span class="s2">`</span><span class="p">${</span><span class="nx">lusitana</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased `</span><span class="si">}</span><span class="p">&gt;</span>  <span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* Prop `className` did not match. Server: "__className_e66fe9 antialiased" Client: "__className_712214 antialiased */</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>On a first rendering of the page sometimes visualized the font correctly. But then this error is thrown:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Warning: Prop `className` did not match. Server: "__className_e66fe9 antialiased" Client: "__className_712214 antialiased "
</span></code></pre></div></div>

<p>Perhaps changing the function name to match it with the node name would help?</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">AboutLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="p">=</span><span class="s">"en"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">body</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">lusitana</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased `</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Nope, same issue:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: Prop `className` did not match. Server: "__className_e66fe9 antialiased" Client: "__className_712214 antialiased "
</code></pre></div></div>

<p>I tried to export just the <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> tag to see if that would solve the problem. While the font renders correctly, now we have a hydration problem.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">AboutLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>

        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">lusitana</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased `</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* Hydration failed because the initial UI does not match what was rendered on the server.
                Warning: Expected server HTML to contain a matching &lt;h1&gt; in &lt;h1&gt;.
                See more info here: https://nextjs.org/docs/messages/react-hydration-error */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>

    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Since the original page contained a <code class="language-plaintext highlighter-rouge">&lt;h2&gt;&lt;/h2&gt;</code> element, I thought that perhaps removing it would help avoiding this issue. However, even without the <code class="language-plaintext highlighter-rouge">&lt;h2&gt;</code> element, the same error persists.</p>

<p>In the end, I tried to fix the error by wrapping the text in a <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> element instead of a <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> one. This time, the page rendered without a problem.</p>

<p><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">AboutLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>

        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">lusitana</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased `</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* No errors */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>

    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/app/about/layout.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">About</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">getDate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toLocaleDateString</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Welcome! Today is <span class="si">{</span><span class="nf">getDate</span><span class="p">()</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* No errors */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The problem was clearly about how HTML tag nesting is handled here. Enough hands-on experimenting: time to do some learning through the tutorial!</p>

<h2 id="routes-and-layouts-in-nextjs">Routes and Layouts in NextJS</h2>

<p>Hereâ€™s a quick rundown of Chapter 4 of the NextJS tutorial. Each subfolder and its <code class="language-plaintext highlighter-rouge">page.tsx</code> file constitute a URL path on the app (which in NextJS jargon is called a <strong>route</strong>).[^10]</p>

<p>For example:</p>

<div class="mermaid">
graph LR;

/app/about/page.tsx --&gt; domain.com/about/
</div>

<p>The default function of each <code class="language-plaintext highlighter-rouge">page.tsx</code> can be technically named anything really, not necessarily the name of the folder node. For example, in an <code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code> we can have:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">About</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// works</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// also works</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Iâ€™m wondering if there is a naming convention for exported default functions (other than just being clearly named, of course!)</p>

<h3 id="layouts">Layouts</h3>

<p>You can also include a <code class="language-plaintext highlighter-rouge">layout.tsx</code> to help in creating the UI of the page.</p>

<div class="mermaid">
graph TB;


/app/about/layout.tsx --&gt; domain.com/about/
/app/about/page.tsx --&gt; domain.com/about/

</div>

<p><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code> and <code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code> are rendered as <code class="language-plaintext highlighter-rouge">https://domain.com/about/</code>.</p>

<p>However, the real power and purpose of <code class="language-plaintext highlighter-rouge">layout.tsx</code> is that it applies to all pages in the same node.</p>

<div class="mermaid">
graph TB;
/app/about/layout.tsx --&gt; domain.com/about/
/app/about/page.tsx --&gt; domain.com/about/
/app/about/contacts/page.tsx --&gt; domain.com/about/contacts
/app/about/layout.tsx ---&gt; domain.com/about/contacts
</div>

<p>To summarize:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code> exports the React component</li>
  <li><code class="language-plaintext highlighter-rouge">/app/about/layout.tsx</code> creates UI styles that are shared among different pages within the same route.</li>
</ul>

<p>Also, <code class="language-plaintext highlighter-rouge">/app/layout.tsx</code> is a mandatory part of any NextJS project, since it is shared by all pages in the project. Thatâ€™s where you actually modify the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> of the app.</p>

<h2 id="correcting-the-experiment">Correcting the experiment</h2>

<p>Going back to the experiment, I realize that in the tutorial project the <code class="language-plaintext highlighter-rouge">about</code> page is not rendering correctly because the <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> tags are positioned inside other HTML elements. But if I wrap <code class="language-plaintext highlighter-rouge">&lt;h1&gt;{children}&lt;/h1&gt;</code> inside of <code class="language-plaintext highlighter-rouge">&lt;article&gt;</code>, then things work fine</p>

<p><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">About</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">getDate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toLocaleDateString</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            Welcome! Today is a beautiful day
            <span class="si">{</span><span class="cm">/* No errors */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/app/about/layout.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">AboutLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">article</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* No errors */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>

    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Result:</p>

<p><img src="/assets/images/nextjs-layout1.png" alt="A browser showing a page and the element inspector matching what the code was supposed to do." /></p>

<p>However, based on what I read in the tutorial, this would clearly a poor use of <code class="language-plaintext highlighter-rouge">layout.tsx</code>. Perhaps a more productive use of this tool would be to create a heading with a date that applies to all posts of the same route.</p>

<p><code class="language-plaintext highlighter-rouge">/app/about/layout.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">lusitana</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/app/ui/fonts</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">AboutLayout</span><span class="p">({</span>
    <span class="nx">children</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
    <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">getDate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">().</span><span class="nf">toLocaleDateString</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="kd">function</span> <span class="nf">GetTitle</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return </span><span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Daily post of <span class="si">{</span> <span class="nf">getDate</span><span class="p">()</span> <span class="si">}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return </span><span class="p">(</span>

        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">article</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">GetTitle</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">lusitana</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased `</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="cm">/* No errors */</span><span class="si">}</span>
        <span class="p">&lt;/&gt;</span>

    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/app/about/page.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">About</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;&gt;</span>
            <span class="p">&lt;</span><span class="nt">article</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Welcome! Today is a beautiful day<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>
        <span class="p">&lt;/&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Result:</p>

<p><img src="/assets/images/nextjs-layout2.png" alt="Alt text" /></p>

<p>Of course that is just a simple implementation of a layout, but I canâ€™t wait to use it for more complex tasks!</p>]]></content><author><name></name></author><category term="programming" /><category term="nextjs" /><category term="web development" /><summary type="html"><![CDATA[Learning (and breaking) NextJS's layouts]]></summary></entry><entry><title type="html">Learning NextJS: Getting Started, Style and Static Assets</title><link href="https://www.anprivitera.com/2023/11/12/nextjs-style-fonts-images.html" rel="alternate" type="text/html" title="Learning NextJS: Getting Started, Style and Static Assets" /><published>2023-11-12T01:24:00+00:00</published><updated>2023-11-12T01:24:00+00:00</updated><id>https://www.anprivitera.com/2023/11/12/nextjs-style-fonts-images</id><content type="html" xml:base="https://www.anprivitera.com/2023/11/12/nextjs-style-fonts-images.html"><![CDATA[<p>Vercel recently released <a href="https://nextjs.org/learn">a new tutorial for NextJS</a> alongside version 14 of the framework. I decided to take it to familiarize myself with this tool. I just finished Chapter 3, and Iâ€™m already captivated by both the strengths of this framework and the excellent learning experience offered by the tutorial.</p>

<p>I thought about sharing my learnings here in a series of posts. I highly recommend taking this tutorial by yourself. However, if you want to have a quick preview of what youâ€™ll find, or if you know previous versions of the framework and are interested in taking a quick look to the features of v14, I hope youâ€™ll find this post useful!</p>

<p>If you want, you can follow what Iâ€™m learning also <a href="https://github.com/anprivitera/nextjs-dashboard">by starring the GitHub repository where Iâ€™m sharing the tutorial steps</a>.</p>

<h2 id="creating-an-app">Creating an App</h2>

<h3 id="how-the-tutorial-does-it">How the tutorial does it</h3>

<p>The tutorial comes with an already half-completed app. The course designers motivate this choice by saying that it puts the learner in the shoes of a real-life situation, and thatâ€™s certainly something I would like to see in more tutorials moving forward. Also, similarly to what happens in <a href="https://javascript.info">Javascript.info</a> the designers managed to insert small, simple yet non-trivial tasks that the learner has to complete to verify their knowledge. I find this method an excellent way to involve the learner in the course, and thatâ€™s mainly how the tutorial so far has lived up to the expectations it set for itself.</p>

<h3 id="how-you-do-it-in-real-life">How you do it in real life</h3>

<p>However, if youâ€™re installing NextJS from scratch, youâ€™ll just have to run this command.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app
</code></pre></div></div>

<p>On a first install, youâ€™ll be able to select several options, including</p>

<ul>
  <li>The projectâ€™s name</li>
  <li>Whether you want to use TypeScript (default: yes)</li>
  <li>Whether you want to use ESLint (default: yes)</li>
  <li>Whether you want to use a src (default: no, since <code class="language-plaintext highlighter-rouge">/app/</code> is now the default)</li>
  <li>Whether you want to use AP router (default: yes)</li>
  <li>Whether you want customize the default import alias (@/*)? (default: no, but if you select yes you can further select which import alias to select).</li>
</ul>

<h3 id="running-development-server">Running Development Server</h3>

<p>To run the development server locally<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="c"># installs project's packages</span>
npm run dev
</code></pre></div></div>

<h2 id="folder-structure">Folder Structure</h2>

<p>Here is the folder structure of a NextJS app.</p>

<div class="mermaid">
graph LR;
/ --&gt; app/
/ --&gt; public/
/ --&gt; scripts/
/ --&gt; next.config.js
app/ --&gt; Lib/
app/ --&gt; UI/
app/ --&gt; layout.tsx
app/ --&gt; page.tsx
UI/ --&gt; global.css
UI/ --&gt; *name*.module.css
UI/ --&gt; font.ts
</div>

<p>Hereâ€™s an explanation of what these files do.</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">/app/</code></strong>: where you spend most time working<sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">/app/lib/</code></strong>: for functions<sup id="fnref:1:2" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></li>
      <li><strong><code class="language-plaintext highlighter-rouge">/app/ui/</code></strong>: ui components<sup id="fnref:1:3" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>
        <ul>
          <li><strong><code class="language-plaintext highlighter-rouge">/app/ui/global.css</code></strong>
            <ul>
              <li>sets the CSS style rules for all the routes in the application when imported in <code class="language-plaintext highlighter-rouge">/app/layout.tsx</code></li>
            </ul>
          </li>
          <li><strong><code class="language-plaintext highlighter-rouge">/app/ui/*name*.module.css</code></strong>
            <ul>
              <li>example of an individual CSS module, which you can import to a single page.</li>
            </ul>
          </li>
          <li><strong><code class="language-plaintext highlighter-rouge">/app/ui/font.ts</code></strong>
            <ul>
              <li>managing application fonts.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong><code class="language-plaintext highlighter-rouge">/app/layout.tsx</code></strong>
        <ul>
          <li>exports the whole site for rendering.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">/public/</code></strong>: for static assets<sup id="fnref:1:4" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, like images<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li>
  <li><strong><code class="language-plaintext highlighter-rouge">/scripts/</code></strong>: script to populate database (at least in the NextJS tutorial<sup id="fnref:1:5" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>).</li>
  <li><strong><code class="language-plaintext highlighter-rouge">/next.config.js</code></strong>: present already when the app is created for the first time</li>
</ul>

<h2 id="styling">Styling</h2>

<h3 id="styling-solutions">Styling Solutions</h3>

<p>You can use the following styling solutions for your NextJS app.</p>

<ul>
  <li>Global CSS</li>
  <li>CSS Modules</li>
  <li>Tailwind<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>
    <ul>
      <li>When configuring a NextJS app for the first time, you can choose to use Tailwind to manage the app style.<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></li>
    </ul>
  </li>
  <li>SASS<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup></li>
  <li>CSS-in-JS<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup></li>
</ul>

<p>Different styling solutions can coexist at the same time in a NextJS project (or, at least, Global CSS, CSS Modules and Tailwind).<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup></p>

<h3 id="global-css">Global CSS</h3>

<p>If you want to use the same CSS style globally, import <code class="language-plaintext highlighter-rouge">/app/ui/global.css</code> into <code class="language-plaintext highlighter-rouge">/app/layout.tsx</code><sup id="fnref:4:1" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">@/app/ui/global.css</span><span class="dl">'</span>
</code></pre></div></div>

<h3 id="css-modules">CSS Modules</h3>

<p>NextJS also works with locally scoped CSS modules, which allow for more personalization. In this case, you import modules individually in each page.<sup id="fnref:7:1" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup></p>

<h3 id="classname-instead-of-class">className Instead of class</h3>

<p>Regardless of whether you use Tailwind, vanilla CSS or other methods to style the components, you should use <code class="language-plaintext highlighter-rouge">className</code> as you do in React, not <code class="language-plaintext highlighter-rouge">class</code>.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ArrowRightIcon</span> <span class="na">className</span><span class="p">=</span><span class="s">"w-5 md:w-6"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>If you use <code class="language-plaintext highlighter-rouge">class</code> instead of <code class="language-plaintext highlighter-rouge">className</code> the page seems to be compiled anyway, but with an error in the npm terminal:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">ArrowRightIcon</span> <span class="na">class</span><span class="p">=</span><span class="s">"w-5 md:w-6"</span> <span class="p">/&gt;</span> <span class="c1">//Compiling /page ...</span>
<span class="c1">// âœ“ Compiled /page in 1320ms (470 modules)</span>
<span class="c1">// Warning: Invalid DOM property `class`. Did you mean `className`?</span>
</code></pre></div></div>

<h3 id="clsx-integration">clsx Integration</h3>

<p>In NodeJS, you can use clsx to toggle name classes based on conditions.<sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup></p>

<h2 id="static-assets-management">Static Assets Management</h2>

<p>The way NextJS optimizes static assets like fonts or images is by downloading them during build time, and hosting them. This way, the browser does not have to make any other network requests.</p>

<h3 id="fonts">Fonts</h3>

<p>To use fonts, first import them in the <code class="language-plaintext highlighter-rouge">/app/ui/fonts.ts</code> file.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Inter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/font/google</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// importing Google font already present in the NextJS installation</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">inter</span> <span class="o">=</span> <span class="nc">Inter</span><span class="p">({</span> <span class="na">subsets</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">latin</span><span class="dl">'</span><span class="p">],</span> <span class="na">weight</span><span class="p">:</span> <span class="mi">400</span><span class="p">});</span> <span class="c1">// exporting the constant inter as the font Inter with subset latin and a weight of 400.</span>
</code></pre></div></div>

<p>Then, to set the same font for the same body, edit <code class="language-plaintext highlighter-rouge">/app/layout.tsx</code></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="o">&lt;</span><span class="nx">body</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">inter</span><span class="p">.</span><span class="nx">className</span><span class="p">}</span><span class="s2"> antialiased`</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}&lt;</span><span class="err">/</span><span class="na">body</span><span class="p">&gt;</span>
...
</code></pre></div></div>

<p>The browser console then shows</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">"__className_2eaf22 antialiased"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.__className_e66fe9</span><span class="err">Â </span><span class="p">{</span>
	<span class="nl">font-family</span><span class="p">:</span> <span class="s2">'__Inter_e66fe9'</span><span class="p">,</span> <span class="s2">'__Inter_Fallback_e66fe9'</span><span class="p">;</span>
	<span class="nl">font-style</span><span class="p">:</span> <span class="nb">normal</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="images">Images</h3>

<p>Here is how you use the <code class="language-plaintext highlighter-rouge">Image</code> component in NextJS</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Image</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/image</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// importing the component.</span>

<span class="p">&lt;</span><span class="nc">Image</span> 
	<span class="na">src</span><span class="p">=</span><span class="s">"/image.png"</span> <span class="c1">// don't forget the initial "/"</span>
	<span class="na">height</span><span class="p">=</span><span class="si">{}</span> <span class="c1">// mandatory</span>
	<span class="na">className</span><span class="p">=</span><span class="s">""</span> <span class="c1">//optional</span>
	<span class="na">alt</span><span class="p">=</span><span class="s">""</span> <span class="c1">// accessibility</span>
<span class="p">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">className="hidden md:block"</code> hides a part of the page on mobile and show it on desktop.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">className="block md:hidden"</code> hides the part of the page on mobile.</p>
  </li>
</ul>

<h2 id="unanswered-questions-so-far">Unanswered Questions so far</h2>

<ul>
  <li>Can Global CSS, CSS Modules, Tailwind, SASS and CSS-in-JS coexist all at the same time in a NextJS app?</li>
  <li>Can I import personalized fonts in the <code class="language-plaintext highlighter-rouge">/public/</code> folder for rendering?</li>
  <li>What is exactly a Route?</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>And thatâ€™s it for today! I hope you found this post informative, but of course it is not a replacement for the amazing tutorial Vercel has designed.</p>

<p>Iâ€™ll be back soon with more learnings about NextJS!</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://nextjs.org/learn/dashboard-app/getting-started">Getting Started - NextJS Tutorial</a>Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a>Â <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a>Â <a href="#fnref:1:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a>Â <a href="#fnref:1:3" class="reversefootnote" role="doc-backlink">&#8617;<sup>4</sup></a>Â <a href="#fnref:1:4" class="reversefootnote" role="doc-backlink">&#8617;<sup>5</sup></a>Â <a href="#fnref:1:5" class="reversefootnote" role="doc-backlink">&#8617;<sup>6</sup></a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://nextjs.org/learn/dashboard-app/optimizing-fonts-images#why-optimize-images">Why optimize images? - NextJS Tutorial</a>Â <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://nextjs.org/docs/app/building-your-application/styling/tailwind-css">Tailwind CSS - NextJS Docs</a>Â <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://nextjs.org/learn/dashboard-app/css-styling#tailwind">CSS styling &gt; Tailwind - NextJS Tutorial</a>Â <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a>Â <a href="#fnref:4:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://nextjs.org/docs/app/building-your-application/styling/sass">Sass - NextJS docs</a>Â <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p><a href="https://nextjs.org/docs/app/building-your-application/styling/css-in-js">CSS-in-JS - NextJS docs</a>Â <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://nextjs.org/learn/dashboard-app/css-styling#css-modules">CSS Modules - NextJS Tutorial</a>Â <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a>Â <a href="#fnref:7:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p><a href="https://nextjs.org/learn/dashboard-app/css-styling#using-the-clsx-library-to-toggle-class-names">Using the clsx library - NextJS tutorial</a>Â <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="programming" /><category term="nextjs" /><category term="web development" /><category term="learning design" /><summary type="html"><![CDATA[Learning the basics of NextJS]]></summary></entry><entry><title type="html">Assignment Destructuring in JavaScript</title><link href="https://www.anprivitera.com/2023/11/02/assignment-destructuring-in-javascript.html" rel="alternate" type="text/html" title="Assignment Destructuring in JavaScript" /><published>2023-11-02T21:21:00+00:00</published><updated>2023-11-02T21:21:00+00:00</updated><id>https://www.anprivitera.com/2023/11/02/assignment-destructuring-in-javascript</id><content type="html" xml:base="https://www.anprivitera.com/2023/11/02/assignment-destructuring-in-javascript.html"><![CDATA[<p>In JavaScript, assignment destructuring is a way to assign one or more elements of an existing array or an object (positioned on the right) into one or more variables (positioned on the left).</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// 2</span>
</code></pre></div></div>

<p>Letâ€™s start by focusing on array destructuring. Letâ€™s use as an example a simple array containing numbers from 1 to 10.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="skipping-elements">Skipping Elements</h2>

<p>By adding an empty space between commas, you skip one position in the array.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span> <span class="c1">// a == 1, b == 3</span>
</code></pre></div></div>

<p>Add more commas to skip more items</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="c1">// a == 1</span>
<span class="c1">// b == 4</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="p">,</span> <span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="c1">// a == 1</span>
<span class="c1">// b == 5</span>
</code></pre></div></div>

<h2 id="assigning-more-elements-than-existing-ones">Assigning More Elements than Existing Ones</h2>

<p>If you assign more elements than the number of elements present in the source, the remaining element are <code class="language-plaintext highlighter-rouge">undefined</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">f</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<h2 id="the-rest-property">The Rest Property</h2>

<p>To transfer more than one item in an array into a single variable, you can use <strong>the rest property</strong> (<code class="language-plaintext highlighter-rouge">...</code>).</p>

<p>The rest property enumerates all of the items in an array and puts them in a separate array.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[...</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="c1">// a == [1, 2, 3, 4,  5, 6, 7, 8, 9, 10]</span>
</code></pre></div></div>

<p>You can combine the rest property together with the commas. You can use it to assign individual items from an array.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="c1">// a == 1</span>
<span class="c1">// b == 2</span>
<span class="c1">// rest == [3, 4, 5, 6, 7, 8, 9, 10]</span>
</code></pre></div></div>

<p>Commas also allow you to skip items in an array, affecting the items the rest property interacts with.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="c1">// a == 1</span>
<span class="c1">// b == 3</span>
<span class="c1">// rest == [3, 4, 5, 6, 7, 8, 9, 10] </span>
</code></pre></div></div>

<p>If you want to use the rest property to destructure individual items instead of positioning them in an array, just add square brackets.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...[</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="c1">// a == 1</span>
<span class="c1">// b == 2</span>
<span class="c1">// c == 3</span>
<span class="c1">// d == 4</span>
</code></pre></div></div>

<p>You can also use the rest property to access arrays properties, although the properties are from the already modified array, not the original one.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...{</span> <span class="nx">length</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="c1">// 8</span>
</code></pre></div></div>

<h3 id="position-of-rest-property">Position of Rest Property</h3>

<p>Remember that the rest property always needs to be at the end of the destructured array.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span> <span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span> <span class="c1">//Uncaught SyntaxError: Rest element must be last element</span>
</code></pre></div></div>

<p>If you use the Rest property in a nested way, the first nested property still needs to be the last element of the object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...[</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="p">,</span> <span class="p">...[</span><span class="nx">e</span><span class="p">]]]</span> <span class="o">=</span> <span class="nx">array</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="c1">// 1 2 3 4 6</span>
</code></pre></div></div>

<h2 id="object-destructuring">Object Destructuring</h2>

<p>So far, we only saw examples of array destructuring in arrays, but you can use assignment destructuring also for objects.</p>

<p>Letâ€™s see how assignment destructuring works in JavaScript by looking at this sample object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="parenthesis-wrapping">Parenthesis Wrapping</h3>

<p>When attempting to do object destructuring, youâ€™ll notice that a SyntaxError in the browser console:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="c1">// SyntaxError: Unexpected token '='</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">);</span>
</code></pre></div></div>

<p>To avoid this error, wrap the entire object destructuring assignment in parentheses.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">};</span>
<span class="nf">const </span><span class="p">({</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">);</span> 
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">);</span> <span class="c1">// "John Smith"</span>
</code></pre></div></div>

<h3 id="key-assignment">Key Assignment</h3>

<p>If I try to assign the information associated to the keys <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">surname</code>, <code class="language-plaintext highlighter-rouge">age</code> to variables named in a different way (for example, <code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code>, <code class="language-plaintext highlighter-rouge">c</code>) these variables return undefined as a value.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="nf">const </span><span class="p">({</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p>However, if I assign these key values to the variables named after the keys, I get the correct assignment.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="nf">const </span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">surname</span><span class="p">,</span> <span class="nx">age</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// "John"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">surname</span><span class="p">)</span> <span class="c1">// "Smith"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 25</span>
</code></pre></div></div>

<p>If I include keys in the object to the left, I can assign key values to variables with different names.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="nf">const </span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">a</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="nx">b</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="nx">c</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// "John"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// "Smith"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="c1">// 25</span>
</code></pre></div></div>

<h3 id="object-destructuring-and-the-rest-property">Object Destructuring and the Rest Property</h3>

<p>You can use the rest property (<code class="language-plaintext highlighter-rouge">...</code>) also while destructuring an object. The result will be a new object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="nf">const </span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// "John"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">)</span> <span class="c1">// { surname: 'Smith', age: 25 }</span>
</code></pre></div></div>

<p>The rest property works in the same way even if you use an object with keys on the left.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="nf">const </span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// "John"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">rest</span><span class="p">)</span> <span class="c1">// { surname: 'Smith', age: 25 }</span>
</code></pre></div></div>

<p>However, when working with an object, you can use the rest property only with one variable.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="p">...{</span><span class="nx">surname</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span> <span class="c1">// SyntaxError: `...` must be followed by an assignable reference in assignment contexts</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="nx">a</span><span class="p">,</span> <span class="p">...{</span><span class="na">surname</span><span class="p">:</span> <span class="nx">b</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="nx">c</span><span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span> <span class="c1">// SyntaxError: `...` must be followed by an assignable reference in assignment contexts</span>
</code></pre></div></div>

<h3 id="destructuring-nested-objects">Destructuring Nested Objects</h3>

<p>To destructure nested objects, remember to replicate the original object structure accurately.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alessandro</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Del Piero</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Juventus</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Italy</span><span class="dl">"</span> <span class="p">}}</span>
<span class="p">({</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span><span class="nx">club</span><span class="p">,</span> <span class="nx">national</span><span class="p">}}</span> <span class="o">=</span> <span class="nx">player</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">club</span><span class="p">,</span> <span class="nx">national</span><span class="p">)</span> <span class="c1">// Alessandro Del Piero Juventus Italy</span>
</code></pre></div></div>

<h3 id="cannot-destructure-object-into-arrays">Cannot Destructure Object into Arrays</h3>

<p>Since array destructuring uses iteration, you cannot destructure an object (which is non-iterable) into an array (which is iterable).</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="p">[</span><span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">f</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span> <span class="c1">// Uncaught TypeError: object is not iterable (cannot read property Symbol(Symbol.iterator))</span>
</code></pre></div></div>

<h2 id="constants-and-variables-in-assignment-destructuring">Constants and Variables in Assignment Destructuring</h2>

<p>In the examples we saw so far, we used only the <code class="language-plaintext highlighter-rouge">const</code> declaration to destructure assignments. Of course, you can use also <code class="language-plaintext highlighter-rouge">let</code>, based on your needs.</p>

<p>Moreover, you can also declare specific parts of an array or object in different ways, so that you can fine-tune what you want to keep and what you may want to change later on.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">[,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// 1, 2</span>
<span class="nx">b</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// 1, "two"</span>
</code></pre></div></div>

<h2 id="assignment-patterns">Assignment Patterns</h2>

<p>All the previous examples dealt with binding examples, meaning that we are destructuring arrays or objects we already declared. However, we can also assign data to an empty array.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[]</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="p">({</span><span class="na">firstName</span><span class="p">:</span> <span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="na">lastName</span><span class="p">:</span> <span class="nx">array</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="na">age</span><span class="p">:</span> <span class="nx">array</span><span class="p">[</span><span class="mi">2</span><span class="p">]}</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="c1">// [ 'John', 'Smith', 25 ]</span>
</code></pre></div></div>

<h2 id="default-values">Default Values</h2>

<p>You can assign default values to destructured properties, which replaces empty or <code class="language-plaintext highlighter-rouge">undefined</code> items.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
<span class="p">[</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
<span class="p">[</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>If the item is <code class="language-plaintext highlighter-rouge">null</code>, the default value does not work.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
<span class="p">[</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// null</span>
</code></pre></div></div>

<p>Default values also work in objects.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="kd">let</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">surname</span><span class="p">,</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">city</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">New York</span><span class="dl">"</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">obj</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">surname</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="c1">// John Smith 25 New York</span>
</code></pre></div></div>

<h2 id="common-uses-of-destructuring-assignments">Common Uses of Destructuring Assignments</h2>

<h3 id="assignment-destructuring-and-functions">Assignment Destructuring and Functions</h3>

<p>The returned values of a function can be part of a destructuring assignment.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">helloWorld</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nf">helloWorld</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="c1">// "Hello World"</span>
</code></pre></div></div>

<p>You can use assignment destructuring to get a specific value of an object</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="kd">function</span> <span class="nf">getAge</span><span class="p">(</span> <span class="p">{</span><span class="nx">age</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//this function takes as a parameter the value associated to the key "age" of the provided object</span>
	<span class="k">return</span> <span class="nx">age</span>
<span class="p">}</span>

<span class="nf">getAge</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// 25</span>
</code></pre></div></div>

<p>You can also rename the parameter.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">surname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">}</span>
<span class="kd">function</span> <span class="nf">getAge</span><span class="p">(</span> <span class="p">{</span><span class="na">age</span><span class="p">:</span> <span class="nx">years</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//this function takes as a parameter the value associated to the key "age" of the provided object</span>
	<span class="k">return</span> <span class="nx">years</span>
<span class="p">}</span>

<span class="nf">getAge</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// 25</span>
</code></pre></div></div>

<p>You can also access nested keys in an object.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alessandro</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Del Piero</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Juventus</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Italy</span><span class="dl">"</span> <span class="p">}}</span>
<span class="kd">function</span> <span class="nf">getTeams</span><span class="p">({</span><span class="nx">lastName</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span><span class="nx">club</span><span class="p">,</span> <span class="nx">national</span><span class="p">}})</span> <span class="p">{</span>
	<span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">lastName</span><span class="p">}</span><span class="s2"> played for </span><span class="p">${</span><span class="nx">club</span><span class="p">}</span><span class="s2"> and </span><span class="p">${</span><span class="nx">national</span><span class="p">}</span><span class="s2">`</span>
<span class="p">}</span>

<span class="nf">getTeams</span><span class="p">(</span><span class="nx">player</span><span class="p">)</span> <span class="c1">// 'Del Piero played for Juventus and Italy'</span>
</code></pre></div></div>

<p>As usual, you can also assign default values.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">player2</span> <span class="o">=</span> <span class="p">{</span><span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ronaldo</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Real Madrid</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Portugal</span><span class="dl">"</span> <span class="p">}}</span>
<span class="kd">function</span> <span class="nf">getTeams</span><span class="p">({</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Cristiano</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span><span class="nx">club</span><span class="p">,</span> <span class="nx">national</span><span class="p">}})</span> <span class="p">{</span>
<span class="p">...</span> <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">lastName</span><span class="p">}</span><span class="s2"> played for </span><span class="p">${</span><span class="nx">club</span><span class="p">}</span><span class="s2"> and </span><span class="p">${</span><span class="nx">national</span><span class="p">}</span><span class="s2">`</span>
<span class="p">...</span> <span class="p">}</span>
<span class="nf">getTeams</span><span class="p">(</span><span class="nx">player2</span><span class="p">)</span> <span class="c1">// Cristiano Ronaldo played for Real Madrid and Portugal</span>
</code></pre></div></div>

<h3 id="swapping-variables">Swapping Variables</h3>

<p>Assignment destructuring is useful for swapping variables.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">World</span><span class="dl">"</span><span class="p">;</span>

<span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="c1">// "World Hello"</span>
</code></pre></div></div>

<p>Assignment destructuring is also an excellent way to shuffle an array, as explained in <a href="https://javascript.info/task/shuffle">JavaScript.info</a> (spoilers for exercises!)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nf">shuffleArray</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
		<span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">array</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="assignment-destructuring-and-loops">Assignment Destructuring and Loops</h3>

<p>You can also use assignment destructuring together with <code class="language-plaintext highlighter-rouge">for ... in</code> loops.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">players</span> <span class="o">=</span> <span class="p">[</span> 
	<span class="nx">player1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alessandro</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Del Piero</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Juventus</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Italy</span><span class="dl">"</span> <span class="p">}},</span> 
	<span class="nx">player2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Cristiano</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ronaldo</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Real Madrid</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Portugal</span><span class="dl">"</span> <span class="p">}}</span>
<span class="p">];</span>
<span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="p">{</span><span class="na">lastName</span><span class="p">:</span> <span class="nx">surname</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="nx">c</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="nx">n</span> <span class="p">}}</span> <span class="k">of</span> <span class="nx">players</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">surname</span><span class="p">}</span><span class="s2"> played for </span><span class="p">${</span><span class="nx">c</span><span class="p">}</span><span class="s2"> and </span><span class="p">${</span><span class="nx">n</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
	<span class="c1">// Del Piero played for Juventus and Italy</span>
	<span class="c1">// Ronaldo played for Real Madrid and Portugal</span>
<span class="p">}</span> 
</code></pre></div></div>

<h3 id="combining-arrays-and-objects-in-assignment-destructuring">Combining Arrays and Objects in Assignment Destructuring</h3>

<p>You can easily combine array and object destructuring.</p>

<p>You can destructure objects inside an arrayâ€¦</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">players</span> <span class="o">=</span> <span class="p">[</span> 
	<span class="nx">player1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alessandro</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Del Piero</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Juventus</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Italy</span><span class="dl">"</span> <span class="p">}},</span> 
	<span class="nx">player2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Cristiano</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ronaldo</span><span class="dl">"</span><span class="p">,</span> <span class="na">teams</span><span class="p">:</span> <span class="p">{</span> <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Real Madrid</span><span class="dl">"</span><span class="p">,</span> <span class="na">national</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Portugal</span><span class="dl">"</span> <span class="p">}}</span>
<span class="p">];</span>

<span class="p">[</span> <span class="p">,</span> <span class="p">{</span><span class="nx">lastName</span><span class="p">}</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">players</span> <span class="c1">// I'm assigning the value associated to the key "lastName" in the second item of the array "players"</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">lastName</span><span class="p">)</span> <span class="c1">// Ronaldo</span>
</code></pre></div></div>

<p>â€¦as well as arrays inside objects.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Roberto</span><span class="dl">"</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Baggio</span><span class="dl">"</span><span class="p">,</span> <span class="na">clubs</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Vicenza</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Fiorentina</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Juventus</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Milan</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Inter</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Bologna</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Brescia</span><span class="dl">"</span><span class="p">]}</span>

<span class="p">{</span> <span class="na">clubs</span><span class="p">:</span> <span class="p">[</span> <span class="p">,</span> <span class="p">,</span> <span class="nx">club</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">player</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">club</span><span class="p">,</span> <span class="nx">rest</span><span class="p">)</span> <span class="c1">// Juventus [ 'Milan', 'Inter', 'Bologna', 'Brescia' ]</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><category term="javascript" /><summary type="html"><![CDATA[A quick guide for array and object destructuring in JavaScript]]></summary></entry></feed>